# Solution
#  Runtime: 91%
#  Memory usage: 81%
#
# Description
#
# You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.
#
# The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.
#
# Return the length of the longest cycle in the graph. If no cycle exists, return -1.
#
# A cycle is a path that starts and ends at the same node.
#

class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        unknown = set(range(len(edges)))
        longest_cycle = -1

        while unknown:
            start = unknown.pop()
            distance = 0
            table = {start: distance}
            node = edges[start]
            
            while node in unknown:
                unknown.remove(node)
                distance += 1
                table[node] = distance
                node = edges[node]

            if node in table:
                longest_cycle = max(longest_cycle, distance - table[node] + 1)

        return longest_cycle
